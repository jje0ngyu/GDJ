<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<!-- mapper의 namespace를 Mapper Interface로 지정해 준다. -->
<mapper namespace="com.gdu.app11.mapper.EmpMapper">

	<!-- employees와 departments의 조인을 위한 resultMap -->
	<resultMap type="EmpDTO" id="EmpMap">
		<id column="EMPLOYEE_ID" property="employeeId" />  <!-- <result column="EMPLOYEE_ID" property="employeeId" /> -->
		<result column="FIRST_NAME" property="firstName" />
		<result column="LAST_NAME" property="lastName" />
		<result column="EMAIL" property="email" />
		<result column="PHONE_NUMBER" property="phoneNumber" />
		<result column="HIRE_DATE" property="hireDate" />
		<result column="JOB_ID" property="jobId" />
		<result column="COMMISSION_PCT" property="commissionPct" />
		<result column="SALARY" property="salary" />
		<result column="MANAGER_ID" property="managerId" />
		<association javaType="DeptDTO" property="deptDTO">
			<id column="DEPARTMENT_ID" property="departmentId" />
			<result column="DEPARTMENT_NAME" property="departmentName" />
			<result column="MANAGER_ID" property="managerId" />
			<result column="LOCATION_ID" property="locationId" />
		</association>
	</resultMap>

	<select id="selectAllEmployeesCount" resultType="int">
		SELECT COUNT(*)
		  FROM EMPLOYEES
	</select>
	
	<!-- 파라미터 타입이 2개일 경우 생략하기도 한다. -->
	<!-- 입사순으로 정렬한 뒤(A) → ROWNUM 붙이고 → 11 ~20 가져오기 -->
	<!-- 맵에 저장된 데이터를 가져올 땐, 맵에 저장된 키값"begin","end"를 그대로 사용하면 된다. -->
	<!-- resultMap은 위에 생성되어있는 <resultMap> 태그의 id값을 입력하면 된다. -->
	<select id="selectEmployeesByMap" parameterType="Map" resultMap="EmpMap">  <!-- resultType이 아니라 resultMap이다! -->
		SELECT A.*
		  FROM (SELECT ROW_NUMBER() OVER(ORDER BY <choose>
													<when test="title=='DEPARTMENT_ID'">E.DEPARTMENT_ID</when>
													<otherwise>${title}</otherwise>
												  </choose> ${order}) AS RN, E.*, D.DEPARTMENT_NAME, D.LOCATION_ID
		          FROM DEPARTMENTS D RIGHT OUTER JOIN EMPLOYEES E
		            ON D.DEPARTMENT_ID = E.DEPARTMENT_ID) A
		 WHERE A.RN BETWEEN #{begin} AND #{end}
		  
	</select>
	
	<select id="selectAutoCompleteList" parameterType="Map" resultType="EmpDTO">
		SELECT DISTINCT ${column}
		  FROM EMPLOYEES
		 WHERE ${column} LIKE CONCAT(#{query}, '%')
	</select>
	
	<select id="selectFindEmployeesCount" parameterType="Map" resultType="int">
		SELECT COUNT(*)
		  FROM EMPLOYEES
		<where>
		    <if test="column=='EMPLOYEE_ID' or column=='DEPARTMENT_ID'">
		    	${column} = #{query}
		    </if>
		    <if test="column=='LAST_NAME' or column=='FIRST_NAME' or column=='PHONE_NUMBER'">
		    	${column} LIKE '%' || #{query} || '%'
		    </if>
		    <if test="column=='HIRE_DATE'">
		    	${column} BETWEEN TO_DATE(#{start}, 'yyyy-mm-dd') AND TO_DATE(#{stop}, 'yyyy-mm-dd')
		    </if>
		    <if test="column=='SALARY'">
		    	${column} BETWEEN #{start} AND #{stop}
		    </if>
		</where>
		<!-- WHERE B.RN BETWEEN #{begin} AND #{end}		▷ 문자열로 치환
			=WHERE B.RN BETWEEN '1' AND '10'
			
			WHERE B.RN BETWEEN ${begin} AND ${end}		▷ 값 그대로 치환
			=WHERE B.RN BETWEEN 1 AND 10 
			
			즉, EMPLOYEE_ID를 조회할 때
			 WHERE #{column} = #{query} 로 조회하면
			 WHERE 'EMPLOYEE_ID' = '150'				▷ 칼럼명이 잘못되어 오류 : 칼럼명에 따옴표(')가 표기됨
			 
			 WHERE ${column} = #{query} 로 조회하면
			 WHERE EMPLOYEE_ID = '150'					▷ 칼럼명이 정확히 입력되어 정상
			 
			 정리 : 칼럼명을 변수로 전달할 땐 ${변수} 로 넣어준다.
			 
	 -->
	</select>
	
	<select id="selectFindEmployees" parameterType="Map" resultMap="EmpMap">
	
		<!-- 조인하기 전에 조건 처리하는 것이 성능에 도움됨 -->
	
		<!-- ROWNUM 가상 칼럼 사용 -->
		<!--
		SELECT B.*
		  FROM (SELECT ROWNUM AS RN, A.*
		          FROM (SELECT E.*, D.DEPARTMENT_NAME, D.LOCATION_ID
		                  FROM DEPARTMENTS D RIGHT OUTER JOIN (SELECT * 
				                                                 FROM EMPLOYEES
				                                                <where>
												                    <if test="column=='EMPLOYEE_ID' or column=='DEPARTMENT_ID'">
												                    	${column} = #{query}
												                    </if>
												                    <if test="column=='LAST_NAME' or column=='FIRST_NAME' or column=='PHONE_NUMBER'">
												                  		${column} LIKE '%' || #{query} || '%'
												                  	</if>
												                    <if test="column=='HIRE_DATE'">
												                    	${column} BETWEEN TO_DATE(#{start}, 'yyyy-mm-dd') AND TO_DATE(#{stop}, 'yyyy-mm-dd')
												                    </if>
												                    <if test="column=='SALARY'">
												                    	${column} BETWEEN #{start} AND #{stop}
												                    </if>
												                </where>) E
		                    ON D.DEPARTMENT_ID = E.DEPARTMENT_ID
		                 ORDER BY HIRE_DATE DESC) A) B
		 WHERE B.RN BETWEEN #{begin} AND #{end}
		-->
		
		<!-- ROW_NUMBER() 함수 사용 -->
		SELECT A.*
		  FROM (SELECT ROW_NUMBER() OVER(ORDER BY E.HIRE_DATE DESC) AS RN, E.*, D.DEPARTMENT_NAME, D.LOCATION_ID
		          FROM DEPARTMENTS D RIGHT OUTER JOIN (SELECT * 
		                                                 FROM EMPLOYEES
		                                                <where>
										                    <if test="column=='EMPLOYEE_ID' or column=='DEPARTMENT_ID'">
										                    	${column} = #{query}
										                    </if>
										                    <if test="column=='LAST_NAME' or column=='FIRST_NAME' or column=='PHONE_NUMBER'">
										                    	${column} LIKE '%' || #{query} || '%'
										                    </if>
										                    <if test="column=='HIRE_DATE'">
										                    	${column} BETWEEN TO_DATE(#{start}, 'yyyy-mm-dd') AND TO_DATE(#{stop}, 'yyyy-mm-dd')
										                    </if>
										                    <if test="column=='SALARY'">
										                    	${column} BETWEEN #{start} AND #{stop}
										                    </if>
										                </where>) E
		              ON D.DEPARTMENT_ID = E.DEPARTMENT_ID) A
		 WHERE A.RN BETWEEN #{begin} AND #{end}
		 
	</select>

	
	<!-- CONCAT(A,B) : A 와 B를 연결. 3가지 이상 연결은 안됨. CONCAT을 여러 번 사용해야 함 -->
</mapper>

	
